#include <xc.inc>
global  write
extrn	GLCD_Setup,GLCD_Write_Message
psect   udata_acs    
counter: ds 1    
psect	udata_bank ; reserve data anywhere in RAM (here at 0x400)
faulty:	    ds 0x40    
charP:	    ds 0x40
charA:	    ds 0x40
charC:	    ds 0x40
charE:	    ds 0x40
charI:	    ds 0x40
charN:	    ds 0x40
charV:	    ds 0x40
charD:	    ds 0x40
charR:	    ds 0x40
charG:	    ds 0x40
charM:	    ds 0x40
charO:	    ds 0x40
num0:	    ds 0x40
num1:	    ds 0x40
num2:	    ds 0x40
num3:	    ds 0x40
num4:	    ds 0x40
num5:	    ds 0x40
num6:	    ds 0x40
num7:	    ds 0x40
num8:	    ds 0x40
num9:	    ds 0x40 
myenemy:    ds 0x40
myplayer:   ds 0x40
charS:	    ds 0x40 
psect	data    
	; ******* myTable, data in programme memory, and its length *****
S_list:
	db	0x0,0x0,0x46,0x49,0x49,0x49,0x31,0x0
	S_	EQU 8
	align   2
A_list:
	db	0x0,0x0,0x7E,0x11,0x11,0x11,0x7E,0x0
	A_	EQU 8
	align	2
P_list:	
	db	0x0,0x0,0x7F,0x09,0x09,0x09,0x06,0x0
	P_	EQU 8
	align	2
C_list:
	db	0x0,0x0,0x3E,0x41,0x41,0x41,0x22,0x0
	C_	EQU 8
	align	2
E_list:
	db	0x0,0x0,0x7F,0x49,0x49,0x49,0x41,0x0
	E_	EQU 8
	align	2
I_list:
	db	0x00,0x00,0x41,0x7F,0x41,0x0,0x0,0x0
	I_	EQU 8
	align	2
N_list:
	db	0x0,0x0,0x7F,0x04,0x08,0x10,0x7F,0x0
	N_	EQU 8
	align	2
V_list:
	db	0x0,0x0,0x1F,0x20,0x40,0x20,0x1F,0x0
	V_	EQU 8
	align	2
D_list:
	db	0x0,0x0,0x7F,0x41,0x41,0x22,0x1C,0x0
	D_	EQU 8
	align	2
R_list:	
	db	0x0,0x0,0x7F,0x09,0x19,0x29,0x46,0x0	
	R_	EQU 8
	align	2
G_list:
	db	0x0,0x0,0x3E,0x41,0x49,0x49,0x7A,0x0
	G_	EQU 8
	align	2
M_list:
	db	0x0,0x0,0x7F,0x02,0x0C,0x02,0x7F,0x0
	M_	EQU 8
	align	2
O_list:
	db	0x0,0x0,0x3E,0x41,0x41,0x41,0x3E,0x0
	O_	EQU 8
	align	2
num0_list:
	db	0x0,0x0,0x3E,0x51,0x49,0x45,0x3E,0x0
	num0_	EQU 8
	align	2
Character:
	db	0x0,0x10,0xD8,0x6C,0x6C,0xD8,0x10,0x0
	align	2
	
	
psect	char_code,class=CODE	
write:
	lfsr	0, myplayer	; Load FSR0 with address in RAM
	movlw	low highword(Character)	; address of data in PM
	movwf	TBLPTRU, A		; load upper bits to TBLPTRU
	movlw	high(Character)	; address of data in PM
	movwf	TBLPTRH, A		; load high byte to TBLPTRH
	movlw	low(Character)	; address of data in PM
	movwf	TBLPTRL, A		; load low byte to TBLPTRL
	movlw	S_	; bytes to read
	movwf 	counter, A		; our counter register
loop: 	tblrd*+			; one byte from PM to TABLAT, increment TBLPRT
	movff	TABLAT, POSTINC0; move data from TABLAT to (FSR0), inc FSR0	
	decfsz	counter, A		; count down to zero
	bra	loop		; keep going until finished
		

	movlw	S_	; output message to LCD
				; don't send the final carriage return to LCD
	lfsr	2, myplayer
	call	GLCD_Write_Message
	clrf	counter,A
	return
	
	